console.log("LSAT Demon Analyzer content script loaded on:",window.location.href);setTimeout(()=>{console.log("Content script is alive and running")},1e3);window.addEventListener("message",t=>{if(console.log("Content script received message:",t.data),t.source!==window){console.log("Message source is not window, ignoring");return}t.data.type==="START_LSAT_COLLECTION"&&(console.log("Received collection start message"),f())});chrome&&chrome.runtime&&chrome.runtime.onMessage.addListener((t,e,n)=>(console.log("Content script received runtime message:",t),t.type==="START_LSAT_COLLECTION"&&(console.log("Received runtime collection start message"),f()),!0));function f(){console.log("Starting data collection from current page...");const t=window.location.href;let e=[];chrome.runtime.sendMessage({type:"LSAT_DATA_UPDATE",data:[],status:"Analyzing page structure...",complete:!1});try{t.includes("/practice/")||t.includes("/review/")||t.includes("/test/")?(console.log("Detected practice/review/test page"),e=p()):t.includes("/analytics")||t.includes("/performance")?(console.log("Detected analytics/performance page"),e=h()):(console.log("Unknown page type, trying generic extraction"),e=w()),console.log(`Extraction complete. Found ${e.length} questions`),e.length>0?chrome.runtime.sendMessage({type:"LSAT_DATA_COLLECTED",data:e,complete:!0}):chrome.runtime.sendMessage({type:"LSAT_DATA_UPDATE",data:[],status:"No question data found on this page. Try navigating to a practice test with the question breakdown visible.",complete:!0})}catch(n){console.error("Error collecting data:",n),chrome.runtime.sendMessage({type:"LSAT_DATA_UPDATE",data:[],status:"Error collecting data: "+n.message,complete:!0})}}function p(){const t=[];console.log("Looking for ResultListItem containers...");const e=document.querySelectorAll('.ResultListItem-root, [class*="ResultListItem"]');if(console.log(`Found ${e.length} ResultListItem containers`),chrome.runtime.sendMessage({type:"LSAT_DATA_UPDATE",data:[],status:`Found ${e.length} question containers`,complete:!1}),e.forEach((n,o)=>{try{const s=x(n);s&&(t.push({...s,source:"practice",extractedAt:new Date().toISOString()}),console.log(`Extracted question ${s.questionNumber}:`,s))}catch(s){console.warn("Error extracting from container:",s)}}),t.length===0){console.log("No ResultListItem found, trying MuiBox containers..."),chrome.runtime.sendMessage({type:"LSAT_DATA_UPDATE",data:[],status:"No ResultListItem found, trying alternative selectors...",complete:!1});const n=document.querySelectorAll('[class*="MuiBox-root"]');console.log(`Found ${n.length} MuiBox containers`),n.forEach((o,s)=>{try{const r=T(o);r&&(t.push({...r,source:"practice_muibox",extractedAt:new Date().toISOString()}),console.log(`Extracted from MuiBox - question ${r.questionNumber}:`,r))}catch(r){console.warn("Error extracting from MuiBox:",r)}})}return t.length===0&&(console.log("Trying numbered button approach..."),chrome.runtime.sendMessage({type:"LSAT_DATA_UPDATE",data:[],status:"Trying numbered button extraction...",complete:!1}),t.push(...q())),t}function x(t){console.log("Analyzing container:",t.className);const e=t.querySelector("button[aria-pressed], button[tabindex], button");if(!e)return console.log("No button found in container"),null;const n=parseInt(e.textContent.trim());if(isNaN(n))return console.log("Button text is not a number:",e.textContent),null;console.log(`Found question number: ${n}`);const o=t.querySelector('[class*="MuiTypography"]'),s=o?o.textContent.trim():null;console.log(`Question type: ${s}`);const r=e.getAttribute("aria-pressed"),c=r==="true";console.log(`Correctness - aria-pressed: ${r}, isCorrect: ${c}`);const i=g(t);console.log(`Difficulty: ${i}`);const l=d(),a={questionId:`${l}_q${n}_${Date.now()}`,questionNumber:n,questionType:s||"Unknown",difficulty:i||"Unknown",correct:r!==null?c:null,testName:l,questionText:t.textContent.substring(0,200),rawData:{ariaPressedValue:r,containerClasses:t.className,questionTypeText:s}};return console.log("Final question data:",a),a}function T(t){const e=t.querySelector("button");if(!e)return null;const n=e.textContent.trim(),o=parseInt(n);if(isNaN(o)||o<1||o>30)return null;console.log(`MuiBox - Found question number: ${o}`);const s=t.textContent,r=y(s),c=e.getAttribute("aria-pressed"),i=c==="true",l=g(t),a=d();if(r||c!==null){const u={questionId:`${a}_q${o}_${Date.now()}`,questionNumber:o,questionType:r||"Unknown",difficulty:l||"Unknown",correct:c!==null?i:null,testName:a,questionText:s.substring(0,200),rawData:{ariaPressedValue:c,containerClasses:t.className,allText:s.substring(0,100)}};return console.log("MuiBox question data:",u),u}return null}function q(){const t=[];console.log("Looking for numbered buttons...");const e=document.querySelectorAll("button");return console.log(`Found ${e.length} total buttons`),e.forEach(n=>{const o=n.textContent.trim(),s=parseInt(o);if(!isNaN(s)&&s>=1&&s<=30){console.log(`Found numbered button: ${s}`);const r=n.getAttribute("aria-pressed"),c=r==="true",i=n.closest('[class*="MuiBox"], [class*="ResultList"], div'),l=i?y(i.textContent):null,a=i?g(i):null,u=d(),m={questionId:`${u}_q${s}_${Date.now()}`,questionNumber:s,questionType:l||"Unknown",difficulty:a||"Unknown",correct:r!==null?c:null,testName:u,questionText:i?i.textContent.substring(0,200):o,rawData:{ariaPressedValue:r,buttonText:o,containerText:i?i.textContent.substring(0,100):""}};console.log("Button question data:",m),t.push(m)}}),t}function g(t){const e=t.querySelectorAll('[class*="difficulty"], [class*="bar"], [class*="segment"], [class*="indicator"]');if(e.length>0){const s=Array.from(e).filter(r=>{const c=window.getComputedStyle(r),i=c.backgroundColor;return c.opacity!=="0"&&!i.includes("transparent")&&!i.includes("rgba(0, 0, 0, 0)")}).length/e.length;return s<=.33?"Easy":s<=.66?"Medium":"Hard"}const n=t.textContent.toLowerCase();return n.includes("easy")?"Easy":n.includes("medium")?"Medium":n.includes("hard")||n.includes("difficult")?"Hard":null}function y(t){const e=t.toLowerCase(),n=["main point","strengthen","weaken","assumption","inference","flaw","method of reasoning","method","principle","parallel reasoning","parallel","stated","meaning","supported","resolve","evaluate","organization","analogy","logical reasoning","reading comprehension","analytical reasoning","logic games"];for(const o of n)if(e.includes(o))return o.charAt(0).toUpperCase()+o.slice(1);return null}function h(){const t=[],e=document.querySelectorAll("tr, .question-row, .analytics-row");return console.log(`Analytics page - found ${e.length} table rows`),e.forEach((n,o)=>{try{const s=A(n);s&&t.push({...s,source:"analytics",extractedAt:new Date().toISOString()})}catch(s){console.warn("Error extracting from row:",s)}}),t}function w(){return[...p(),...h()]}function A(t){const e=t.querySelectorAll("td, th, .cell, .column");if(e.length===0)return null;const n=Array.from(e).map(i=>i.textContent.trim()),o=b(n),s=C(n),r=D(n),c=N(n);return o||s!==null||r!==null?{questionId:L(t),questionType:o,difficulty:s,correct:r,testName:c,questionText:n.join(" ").substring(0,200),rawData:n}:null}function b(t){const e=t.join(" ").toLowerCase(),n=["logical reasoning","reading comprehension","analytical reasoning","logic games","strengthen","weaken","assumption","inference","main point","parallel reasoning","flaw","method of reasoning","principle","resolve","evaluate","stated","meaning","supported"];for(const o of n)if(e.includes(o))return o.charAt(0).toUpperCase()+o.slice(1);return null}function C(t){const e=t.join(" ").toLowerCase();if(e.includes("easy")||e.includes("1 star")||e.includes("★"))return"Easy";if(e.includes("medium")||e.includes("2 star")||e.includes("★★"))return"Medium";if(e.includes("hard")||e.includes("difficult")||e.includes("3 star")||e.includes("★★★"))return"Hard";const n=e.match(/difficulty[:\s]*(\d+)/i);if(n){const o=parseInt(n[1]);return o<=2?"Easy":o<=4?"Medium":"Hard"}return null}function D(t){const e=t.join(" ").toLowerCase();return e.includes("correct")||e.includes("✓")||e.includes("right")?!0:e.includes("incorrect")||e.includes("✗")||e.includes("wrong")?!1:null}function N(t){const n=t.join(" ").match(/(?:test|pt|preptest)\s*(\d+)/i);return n?`PrepTest ${n[1]}`:d()}function d(){const t=document.title,e=Array.from(document.querySelectorAll("h1, h2, h3")).map(c=>c.textContent),o=window.location.href.match(/test[\/\-_]?(\d+)/i);if(o)return`Test ${o[1]}`;const r=[t,...e].join(" ").match(/(?:test|pt|preptest)\s*(\d+)/i);return r?`PrepTest ${r[1]}`:"Unknown Test"}function L(t){const n=t.textContent.trim().substring(0,50).split("").reduce((o,s)=>(o=(o<<5)-o+s.charCodeAt(0),o&o),0);return`q_${Math.abs(n)}_${Date.now()}`}
